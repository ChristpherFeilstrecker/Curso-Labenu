import express, { Request, Response } from "express";
import { AddressInfo } from "net";
import { homeworks } from "./data";


const app = express();

app.use(express.json());

const server = app.listen(process.env.PORT || 3003, () => {
  if (server) {
    const address = server.address() as AddressInfo;
    console.log(`Server is running in http://localhost:${address.port}`);
  } else {
    console.error(`Failure upon starting server.`);
  }
});

/*
Exerc√≠cio 1
Fa√ßa novamente a instala√ß√£o e configura√ß√£o do Express na pasta do exerc√≠cio. 
Para testar, crie um endpoint que aponte para o path ‚Äú/ping‚Äù. 
Esse endpoint pode responder apenas com uma mensagem ‚Äúpong‚Äù.
*/

app.get("/ping", (req:Request, res:Response) => {          
    res.send("Pong! üèì")
})

/*
Exerc√≠cio 2
Acesse a API do JSONPlaceholder e observe os endpoints que buscam afazeres (‚Äùto dos‚Äù).
 Crie uma vari√°vel de tipo para representar cada afazer. 
 =>(data.ts)

Exerc√≠cio 3
Acesse a API do JSONPlaceholder e observe os endpoints que buscam afazeres (‚Äùto dos‚Äù).
 Crie uma vari√°vel de tipo para representar cada afazer. 
 =>(data.ts)

Exerc√≠cio 4
Construa um endpoint que retorne todos os afazeres do exerc√≠cio anterior de acordo com um √∫nico status, ou seja,
 retorne ou afazeres conclu√≠dos ou somente os que ainda est√£o em andamento.
*/

app.get("/homework/search", (req:Request, res:Response) => {     
  const homeworkCompleted = req.query.completed

  if(!homeworkCompleted){
    res.status(400).send("Query 'completed' n√£o informado")
  }

  const resultHomeworkCompleted = []

for (let homework of homeworks){
  if(homeworkCompleted === "false" && homework.completed === false){
    resultHomeworkCompleted.push(homework.title)
  }else if(homeworkCompleted === "true" && homework.completed === true){
    resultHomeworkCompleted.push(homework.title)
  }
}
  res.send(resultHomeworkCompleted)
})

/*
Exerc√≠cio 5
Construa um endpoint de cria√ß√£o de afazer. A resposta deve retornar o array de afazeres atualizado.
*/

app.post("/homework/creat", (req:Request, res:Response) => {   
  const userIdBody = req.body.userId  
  const titleBody = req.body.title  
  
  homeworks.push(
    {
      "userId": userIdBody,
      "id": Date.now(),
      "title": titleBody,
      "completed": false
    }
  )
  res.send(homeworks)
})

/*
Exerc√≠cio 6
Construa um endpoint de edi√ß√£o do status de um afazer, ou seja, de completo para incompleto e vice-versa.
*/

app.put("/homework/completed/:id", (req:Request, res:Response) => {   
  const idHomework = Number(req.query.idWork)  

  if(!idHomework) {
    res.status(400).send("Query 'idHomework' n√£o informado")
}
  for (let i = 0; i < homeworks.length; i++){
    if (homeworks[i].id === idHomework){
       homeworks[i].completed = !homeworks[i].completed
    }
  }
  res.send(idHomework)
})